HAL
    - STCube HAL - new, Standard Peripheral Library - old
        - STCube HAL - improvements, simplifies porting code between sub-families.
    - To abstract away from GPIO memory locations, we use "handlers", which are
    "structs", whose references are used to point to real peripheral addresses.

6. GPIO management
    - Default reset status of pin - Input Floating Mode.
    - MODERy - Port x configuration bits (y = 0..15). Configures the I/O mode:
        - 00: input mode (reset state)
        - 01: General purpose output mode
        - 10: Alternate function mode.
        - 11: Analog mode.
    - ODR - Output data register.
        - Example: to "pull" pin high, "set" the corresponding bit of the ODR.
    - IDR - Input data register.
    - Peripherals that use MCU pins need to have these pins configured always.
    - Output i/o port
        - GPIO_MODE_OUTPUT_OD (open drain): 0 in ODR activates N-MOS, 1 leaves the port in Hi-Z
        - GPIO_MODE_OUTPUT_PP (push-pull): 0 in ODR activates N-MOS, 1 activates P-MOS
    - HAL_GPIO_ReadPin, HAL_GPIO_ReadPin, HAL_GPIO_TogglePin - used for driving pins.
      HAL_GPIO_LockPin - lock the configuration of the pin, until a reset occurs.
    - HAL_GPIO_Deinit - used when we no longer need a peripheral, or to avoid waste of power
      when the CPU goes into sleep mode.
    - Unless otherwise required, leave the deafult GPIO pin frequency to low.
    - bit-banding reduces switching frequency.

7. Interrupt management.
    Definition: async event, causes stopping the execution of the current code
    on a priority basis. Specifics:
        - Lower priority interrupts are suspended also.
        - Hardware save current context and knows how to continue after interrupt. 
        - Used by preemptive schedulers in RTOS.
        - Can originate by both software(exceptions) and hardware(IRQs).
    - NVIC - Nested Vectored Interrupt Controller.
        - EXTII - External Interrupt/Event Controller - responsible for
          interconnection between the external I/O signals and the NVIC controller.
        - system exceptions are also handled by NVIC.
    - vector table - maps interrupts to function addresses. Usually resides in
      0x0 for all Cortex-M processors, however in flash it resides in 0x0800 0000
      address, which is aliased to 0x0 when the CPU boots up.
    - ISR - code that survices the interrupt.
    - Types of exceptions (interrupts are also exceptions):
        - Reset (CPU is reset, handler is real entry point of firmware).
          Contains code to set up environment, stack pointer, etc.
          Cannot be masked.
        - NMI - critical/non-defferable activities. Linked to CSS.
            - CSS - Clock security system. Self-diagnostic peripheral that
              detects the failure of HSE.
          Cannot be masked.
        - Hard Fault - generic fault exception - software interrupts. When other
          "Fault" interrupts are disabled it acts like a generic handler for all.
        - Memory management fault - accessed when invalid memory is attempted to
          be accessed or violation rule.
        - Bus Fault - AHB interface receives an error response from a bus slave.
        - Usage Fault - program error (illegal instructions, etc)
        - SVCCall - Supervisor Call instruction is called. RTOS uses it to
          execute instructions in privilledged mode. (sys call)
        - Debug monitor - software debug event occurs, while core in Monitor
          Debug-mode. Also exception for debug events like breakpoints and
          watchpoints.
        - PendSV - like SVCCall, but can be delayed. Allows RTOS to complete
          tasks with higher priority.
        - SysTick - usually related to RTOS, HAL uses it to perform timing activities.
          HAL assumes that the SysTick timer is configured to perform interrupt
          every 1 ms.
        - IRQ handling
          - M0/M0+ cores - 32 external interrupts.
          - M3/M4/M7 - up to 240 interrupts.
        - HAL_NVIC_EnableIRQ - enable interrupt, based on interrupt type.
                               there is equivalent function for disable irq.
        - peripherals must be configured to work in interrupt mode to generate
          the associated interrupt. HAL functions can be used to configure the
          peripheral in interrupt mode. Example: HAL_USART_Trasmit_IT().
    - External interrupts - EXTII lines are connected to GPIO. Example F4:
          - Pins 5 - EXTI0, EXTI0_IRQ
          - Pins 10 - EXTI10, EXTI15_10_IRQ (shared)
          - Pins 10 - EXTI15, EXTI15_10_IRQ (shared)
            When the IRQ is shared, we need to discriminate which EXTII line
            generated the interrupt
          - There is a way to use CubeMX to init a GPIO as IT and call HAL to
            handle the discrimination between different interrupt sources.
    - Interrupt lifecycle:
          - interrupt can be disabled / enabled.
          - either be pending or not pending (waiting for a request to be served)
            An interrupt can be fired again while it is currently being served.
            In this scenario the pending bit can also be cancelled.
            We were using the __HAL_GPIO_EXTI_CLEAR_IT(), because the EXTI Line
            IRQ is being held high for a longer period of time.
          - either being in active or inactive state (currently being served)
            An interrupt is in an inactive state if it is currently being
            suspended because an interrupt with higher priority is being served.
          - it is possible to programatically fire an interrupt from inside the
            ISR of another interrupt. Also you can clear other pending interrupts.
    - Interrupt priority
          - IPR register - control priority of interrupt.
          - interrupt preemption - execution of lower priority interrupts is
            resumed if no higher priority interrupts are pending.
          - for M0 priority is static - priority cannot be changed until the IRQ
            is disabled.
          - Priorities can be subdivided in multiple ways in Cortex M3/4/7
            - AIRCR - subgroup of System Control Block register, defines how IPR
              bits are logically subdivided.
    - Interrupt re-entrace. You can rearrange code so that interrupts are just
      triggering boolean global variables.
    - interrupt masking - when you want to temporary prioritize tasks.
          - "masked" interrupts mean that the pending bit is being set, but the
            interrupt is not serviced.
          - CPSID i - disables all interrupts by setting PRIMASK bit to 1.
            __disable_irq() in CMSIS / __set_PRIMASK(x)
          - CPSIE i - enable all interrupts by setting PRIMASK bit to 0.
            Interrupts start to get serviced
            __enable_irq() in CMSIS / __set_PRIMASK(x)
          - CPSID f - disables all exceptions by setting FAULTMASK bit to 1. (no NMI)
            __set_FAULTMASK(x)
          - CPSIE f - enables all excepetions by setting FAULTMASK bit to 0.
            __set_FAULTMASK(x)
          - Cortex M3/4/7 can mask based on priority in the BASEPRI register.
            (both exceptions and interrupts)

8. UART/USART
    Communication peripheral (interface + protocol), at least two of those in in almost all STM32 MCUs
    Operating modes: polling, interrupt, DMA

Misc:
    - BOM - bill of material.
    - RCC - reset and clock controller.
    - System bus - connects system bus of core to bus matrix
    - DMA bus - connects AHB interface of DMA to the BusMatrix
    - Bus matrix - two masters(CPU, DMA) and four slaves (flash, sram, AHB1, AHB2)
    - Round-robin - simple scheduling algorithm, equal time slices without
    - priority structured in a ring buffer.
    - "absolute file" - file that we upload to flash.
    - debouncing - process of minimizing the impact of bouncing, produced by
      unstable forces (mechanical switch). Generally we deal with it by
      measuring how much time has elapsed from the first variation of the input
      state.
