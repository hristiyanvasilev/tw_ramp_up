HAL
    - STCube HAL - new, Standard Peripheral Library - old
        - STCube HAL - improvements, simplifies porting code between sub-families.
    - To abstract away from GPIO memory locations, we use "handlers", which are
    "structs", whose references are used to point to real peripheral addresses.

6. GPIO management
    - Default reset status of pin - Input Floating Mode.
    - MODERy - Port x configuration bits (y = 0..15). Configures the I/O mode:
        - 00: input mode (reset state)
        - 01: General purpose output mode
        - 10: Alternate function mode.
        - 11: Analog mode.
    - ODR - Output data register.
        - Example: to "pull" pin high, "set" the corresponding bit of the ODR.
    - IDR - Input data register.
    - Peripherals that use MCU pins need to have these pins configured always.
    - Output i/o port
        - GPIO_MODE_OUTPUT_OD (open drain): 0 in ODR activates N-MOS, 1 leaves the port in Hi-Z
        - GPIO_MODE_OUTPUT_PP (push-pull): 0 in ODR activates N-MOS, 1 activates P-MOS
    - HAL_GPIO_ReadPin, HAL_GPIO_ReadPin, HAL_GPIO_TogglePin - used for driving pins.
      HAL_GPIO_LockPin - lock the configuration of the pin, until a reset occurs.
    - HAL_GPIO_Deinit - used when we no longer need a peripheral, or to avoid waste of power
      when the CPU goes into sleep mode.
    - Unless otherwise required, leave the deafult GPIO pin frequency to low.
    - bit-banding reduces switching frequency.

7. Interrupt management.
    Definition: async event, causes stopping the execution of the current code
    on a priority basis. Specifics:
        - Lower priority interrupts are suspended also.
        - Hardware save current context and knows how to continue after interrupt. 
        - Used by preemptive schedulers in RTOS.
        - Can originate by both software(exceptions) and hardware(IRQs).
    - NVIC - Nested Vectored Interrupt Controller.
        - EXTII - External Interrupt/Event Controller - responsible for
          interconnection between the external I/O signals and the NVIC controller.
        - system exceptions are also handled by NVIC.
    - vector table - maps interrupts to function addresses. Usually resides in
      0x0 for all Cortex-M processors, however in flash it resides in 0x0800 0000
      address, which is aliased to 0x0 when the CPU boots up.
    - ISR - code that survices the interrupt.
    - Types of exceptions (interrupts are also exceptions):
        - Reset (CPU is reset, handler is real entry point of firmware).
          Contains code to set up environment, stack pointer, etc.
          Cannot be masked.
        - NMI - critical/non-defferable activities. Linked to CSS.
            - CSS - Clock security system. Self-diagnostic peripheral that
              detects the failure of HSE.
          Cannot be masked.
        - Hard Fault - generic fault exception - software interrupts. When other
          "Fault" interrupts are disabled it acts like a generic handler for all.
        - Memory management fault - accessed when invalid memory is attempted to
          be accessed or violation rule.
        - Bus Fault - AHB interface receives an error response from a bus slave.
        - Usage Fault - program error (illegal instructions, etc)
        - SVCCall - Supervisor Call instruction is called. RTOS uses it to
          execute instructions in privilledged mode. (sys call)
        - Debug monitor - software debug event occurs, while core in Monitor
          Debug-mode. Also exception for debug events like breakpoints and
          watchpoints.
        - PendSV - like SVCCall, but can be delayed. Allows RTOS to complete
          tasks with higher priority.
        - SysTick - usually related to RTOS, HAL uses it to perform timing activities.
          HAL assumes that the SysTick timer is configured to perform interrupt
          every 1 ms.
        - IRQ handling
          - M0/M0+ cores - 32 external interrupts.
          - M3/M4/M7 - up to 240 interrupts.
        - HAL_NVIC_EnableIRQ - enable interrupt, based on interrupt type.
                               there is equivalent function for disable irq.
        - peripherals must be configured to work in interrupt mode to generate
          the associated interrupt. HAL functions can be used to configure the
          peripheral in interrupt mode. Example: HAL_USART_Trasmit_IT().
    - External interrupts - EXTII lines are connected to GPIO. Example F4:
          - Pins 5 - EXTI0, EXTI0_IRQ
          - Pins 10 - EXTI10, EXTI15_10_IRQ (shared)
          - Pins 10 - EXTI15, EXTI15_10_IRQ (shared)
            When the IRQ is shared, we need to discriminate which EXTII line
            generated the interrupt



Misc:
    - BOM - bill of material.
    - RCC - reset and clock controller.
    - System bus - connects system bus of core to bus matrix
    - DMA bus - connects AHB interface of DMA to the BusMatrix
    - Bus matrix - two masters(CPU, DMA) and four slaves (flash, sram, AHB1, AHB2)
    - Round-robin - simple scheduling algorithm, equal time slices without
    - priority structured in a ring buffer.
    - "absolute file" - file that we upload to flash.
