- Definition - real-time kernel, on which applications can built to meet hard real-time requirements.
               allows applications to be organized as separate threads of execution.
               (NOTE: cannot do multiple processes at the same time)
- benefits
    - abstracting away timing information.
    - maintainability/extensibility
    - modularity
    - team development
    - easier testing
    - code reuse
    - improved efficiency
    - idle time - task created when the kernel is started.
        - can be used to measure spare capacity
        - perform background checks
        - place processor into low-power mode
    - power management
        - allows processor to be spend more time in low power mode (tick-less mode)
        - flexible interrupt handlers - can be kept very short by defferring processing to either
                                        application task or deamon task.
- task - thread of execution.
    - xTaskCreate() - createa new task
        - pvTaskCode - ptr to function that implements the code.
        - pcName - descriptive name of the task.
        - usStackDepth - number of words that the stack can hold.
            - configMINIMAL_STACK_SIZE - idle task size.
        - pvParameter - parameter that is being passed to the task.
        - uxPriority - priority of task. Higher number, indicates higher priority.
        - pxCreatedTask - handle to task. This handle can be used to pass to API calls.
                          Example: change priority or delete task.
- Deadlines
    - soft deadline - not meeting the deadline does not render the system to be useless.
                      Example: system might slow down, but does not stop
    - hard deadline - breaching the deadline will result in absolute system failure.
                      In the most simplistic case threads with higher priority for important tasks.
                      Example: airbag system has potential to do more harm than good if it fails
                               to deploy itself after failure to meet deadline.
- distribution
    - distributed as a single .zip file, containing all official FreeRTOS ports + demo applications.
    - critical common files - tasks.c/list.c (+queue.c usually)
    - FreeRTOS - FreeRTOS/Sources/portable/[compiler]/[architecture]
- init
    - prvSetupHardware() - any necessary hardware setup
    - vTaskStartScheduler() - start kernel
- data types
    - TickType_t - Holds tick count since kernel started, unsigned 16/32-bit type.
    - BaseType_t - most efficient type for architecture.
    Compiler requires that each variable needs to be qualified with either signed or unsigned.
- convention
    - variables
        - c - char
        - s - short
        - i - int
        - x - BaseType_t
        - u - unsinged
        - p - pointer
        Example: variable of type uint8_t will be prefixed with 'uc'
    - functions - defined both the return type and the file that they are defined in.
        - prv - private(scope) functions
        Example: vTaskPrioritySet() - returns 'void' and is defined in 'task.c'
    - macros
        - upper case, prefixed with lower case letters, indicating where they are defined.
    - spacing - one tab is always equal to four spaces.
- heap utility functions
    - xPortGetFreeHeapSize - get the size of heap left over.
    - xPortGetMinimumEverFreeHeapSize - indicate how close the app has ever been to running out of space.
    - pvPortMalloc - can be called directly from app code, also it is being used by kernel.
        
Misc:
    - can be built with many different compilers.
