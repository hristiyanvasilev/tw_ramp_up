22. Booting process.
    - phyisical remapping - aliasing memory address to another one. MCUs use
      this mechanism to boot from other memories than the flash. Involves sampling
      of two dedicated pins BOOT0 and BOOT1
        BOOT1 BOOT0
        x     0      - Main flash memory selected as boot space.
        0     1      - System memory selected as boot space.
        1     1      - Embedded SRAM selected as boot space.
      Pins are also resampled when the MCU exists standby mode.

      - modify some bit of SYSCFG memory-mapped register (SYSCFG->MEMRMP) to
        remap memory accessible through the code area. Some of the bits of the
        register are tied with BOOT pins. It is important to have a working
        vector table before you change the register value.

      - Embedded SRAM boot - volatile memory, we have to upload code to memory and ensure
      vector table is properly set at 0x0
      - External SRAM boot is not possible with boot flags, therefore we need to
      do physical remap of 0x0 to external SRAM.
        Requires external debugger tool that pre-loads the SRAM and special
        linker script.
      - VTOR - Vector Table Offset Register in System Control Block.
               Allows to setup the base address of the Vector Table.
               Not available in M0, physical remapping needs to be used to
               bypass limitation.
               Use dmb and dsb instructions before and after updating the
               content of the VTOR register.

    - System memory - special ROM memory containing special bootloader that all
      STM32 MCUs have. Mapped in (0x1FFF 0000 - 0x1FFF 77FF)

        Status of BOOT0 and BOOT1 establishes the boot starting address.
        
    - STM32 bootloader - factory pre-programmed, loads the flash memory from
    several several.
      NOTE: bootloader is selected thanks to specific boot pins.
    - No MMU -> fixed memory layout

23. Running FeeRTOS
    - Motivation;
        - running bare metal applications for complicated tasks is not easy.
        allocating mcu resources takes a a lot of care.
        - improper synchronization structures and poor-designed ISR could lead
        to loss of important sync events and overall unpredictable behavior.
        - RTOS provides the notion of "thread" as an independent execution
        stream. Allows for concurrent activities.
        - Allows for advanced syncrhonization primitives, avoid slower async events.
    - type of scheduling (planing the execution of tasks)
        - cooperating scheduling - function voluntarely gives up control of execution.
        - peemptive scheduling - allows for concurrent execution of multiple
        concurrent tasks.
            - quantum time/time slice - time assigned to each task.
            - context switching - process of moving at task out of the CPU.
    - co-routines (Continuation routines) - programming structures generalizing
    concept of subroutine for non-preemptive multitasking. Allow multiple entry
    points for suspending and resuming executions at certain locations.
    Co-routines don't "return", but they "yield" the execution flow.
    NOTE: they require special support from the programming language run-time
    and are usually related to high-level languages.
    - RTOS - OS offering multitasking (multithreading) while ensuring response
    within specific time contraints (deadlines). They theoretically guarantee
    responses within certain time limits.
        - pagination - segment the task memory into small chunks (pages), which
        are scattered accross RAM and aliased from the MMU.
        - swapping - swap in/out the unusuased pages to external memorization
        unit.
        Both features are intrinsically non-determnistic and prevent OS from
        response to requests in short and countable time.
    - RTOS triggers
        - SysTime - 1 ms
        - SVC (Supervisor Call) - when task wants to voluntarely yield control.
          PendSV exception is being raised
    - Thread States
        - running - only one running at a time.
        - ready - ready to be scheduled for execution.
        - suspended - running thread can voluntarely stop its execution
        - blocked - running thread can start waiting for an external event.
                    can be used for semaphores (always?)
    - Thread Priorities - scheduler chooses threads in ready states that have a
                          higher priority.
                          Fundamental feature of RTOS and foundation of meeting
                          deadlines.
    - Scheduling algorithms in FreeRTOS:
        - Preemptive schedulign with time slicing - time slices for threads with
        same priorities.
        - Preemptive schedulign without time slicing - threads leaves running
        state only if a thread with higher priority enters ready state or if the
        thread itself yields out the control.
        - Cooperative scheduling - a thread leaves the CPU only on voluntary
        basis. Even if higher priority thread enters the queue, the CPU will
        never preempt the thread.
        NOTE: when OS has no more threads to schedule in ready state, it
        schedules a special thread called "idle".
        NOTE: The schedulign policity is determined by the configUSE_PREEMPTION
        and configUSE_TIME_SLICING in FreeRTOSConfig.h
    - Memory allocation and management.
        - Macros used to enable memory allocation:
        configSUPPORT_STATIC_ALLOCATION, configSUPPORT_DYNAMIC_ALLOCATION
        - Dynamic allocation:
            - keeping footprint low, allocated memory can be reused.
            - FreeRTOS provides 5 allocation schemes, chosen to fit application.
              heap_1.c...heal_5.c (port specific)
                - heap_1 - alloc, never free. suitable for kernel, semaphores,
                etc. Skips fragmentation. Uses a statically allocated array,
                size of configTOTAL_HEAP_SIZE
                - heap_2 - depricated
                - heap_3 - uses malloc and free, configTOTAL_HEAP_SIZE has no
                impact. Thread safe, since it suspends scheduler.
                - heap_4 - static allocation, first fit algorithm, combines free
                blocks. (coalescing)
                           Has non-deterministic behavior because of the
                           advanced functionality.
                - heap_5 - same as heap_4, but split the the memory pool into
                different non-contiguous memory region.



24. Advanced debugging techniques.
    - Register Description
        - R0 - R3 (saved during exception handling)
            - first four parameters to pass to a called function.
              NOTE: you should try to limit the number of parameters to 4
              whenever possible.
              If that is not possible, you should keep the most freqnetly used
              in first 4 parameters.
            - return value of function.
        - R12 - scratch register, used by linker to perform "dynamic" linking.
                (saved during exception handling)
        - R13 - SP (saved during exception handling)
            - Process stack pointer
            - Main stack pointer
        - R14 - LR (saved during exception handling)
        - R15 - PC
        - CPSR - Program status register. (saved during exception handling)
    - Fault related exceptions Cortex M3/4/7:
        - Memory Management Fault - violation rules related to MPU config.
        - Bus Fault - wrong access to SRAM or FLASH (like bad function ptr)
            - stacking/unstacking error - occurs during stack pushing/popping.
              Example: stack overflow, causes bus flow since it accesses invalid
              SRAM location.
            - precise bus fault - happened during access instruction
            - imprecise bus fault - happened sometime after the memory access 
              instruction has been done.
        - Usage Fault
            - execution of undefined instructions
            - invalid EXC_RETURN code.
            - unaligned memory access store.
        - Hard Fault (Cortex M0/M0+ cores)
            - used when other fault exception has been disabled.
              When fault arises, we can derive the cause by examining system
              registers! You can also analyse the stack trace.
              NOTE: we need special assembly code in order to access data in the
              saved registers.
            - Access to invalid memory location.
            - Not well-implemented vector table.
            - Stack overflow.
            - software breakpoint
    - Breakpoints / watchpoints:
        - watchpoints: 2 Cortex M0/0+, 4 Cortex M3/4/7
        - breakpoints: 4 Cortex M0/0+, 6 Cortex M3/4/7
        - J-link debuggers allow to set unlimited number of breakpoints.
    - assert_failed - runtime failure detection, need to enable USE_FULL_ASSERT
                      at project level, Implementation of function is left to
                      user, you can just put a simple sw breakpoint.
    - JTAG vs SWD
        - JTAG - defines signaling characteristics and protocol.
               Allows`to attach external debug probes to MCU.
               5 wires + VDD/GND
        - SWD (serial wire debug) - ARM proprietary 2-pin electric interface.
                                    Uses the same JTAG protocol.
                                    Debuggers become AMBA master and can access
                                    system memory / peripherals / debug registers.
                                    Up to 4Mb/s at 50 Mhz.
                                    TMS and TCK are SWDIO and SWCLK
                                    SWO - used to exchange data between MCU and
                                    host application without overhead.
    - In-application programming (IAP) - done by bootloader, upgrade the firmware inside the internal flash.
    - In-system programming (ISP) - done by external debugger, different than IAP
    - bootloader designed to accept commands through communication peripherals,
      which is used to exchange the firmware binary with the MCU.



